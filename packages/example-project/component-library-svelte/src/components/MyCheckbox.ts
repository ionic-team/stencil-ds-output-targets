/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import { Components, JSX } from 'component-library';


interface MyCheckboxProps {
  
  /** The color to use from your application's color palette.
Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`.
For more information on colors, see [theming](/docs/theming/basics). */
  color?: Components.MyCheckbox["color"]
  
  /** The name of the control, which is submitted with the form data. */
  name?: Components.MyCheckbox["name"]
  
  /** If `true`, the checkbox is selected. */
  checked?: Components.MyCheckbox["checked"]
  
  /** If `true`, the checkbox will visually appear as indeterminate. */
  indeterminate?: Components.MyCheckbox["indeterminate"]
  
  /** If `true`, the user cannot interact with the checkbox. */
  disabled?: Components.MyCheckbox["disabled"]
  
  /** The value of the toggle does not mean if it's checked or not, use the `checked`
property for that.

The value of a toggle is analogous to the value of a `<input type="checkbox">`,
it's only used when the toggle participates in a native `<form>`. */
  value?: Components.MyCheckbox["value"]
}

interface MyCheckboxEvents {
  
  /** Emitted when the checked property has changed. */
  myChange: Parameters<JSX.MyCheckbox["onMyChange"]>[0]
  
  /** Emitted when the toggle has focus. */
  myFocus: Parameters<JSX.MyCheckbox["onMyFocus"]>[0]
  
  /** Emitted when the toggle loses focus. */
  myBlur: Parameters<JSX.MyCheckbox["onMyBlur"]>[0]
  
  /** Emitted when the styles change. */
  myStyle: Parameters<JSX.MyCheckbox["onMyStyle"]>[0]
}

interface MyCheckboxSlots {
  default: any
}
  
/* generated by Svelte v3.24.1 */
import {
	SvelteComponent,
	binding_callbacks,
	create_slot,
	detach,
	element,
	flush,
	init,
	insert,
	listen,
	run_all,
	safe_not_equal,
	set_custom_element_data,
	transition_in,
	transition_out,
	update_slot
} from "svelte/internal";

import { createEventDispatcher, onMount } from "svelte";

function create_fragment(ctx) {
	let my_checkbox;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*$$slots*/ ctx[10].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[9], null);

	return {
		c() {
			my_checkbox = element("my-checkbox");
			if (default_slot) default_slot.c();
			set_custom_element_data(my_checkbox, "color", /*color*/ ctx[1]);
			set_custom_element_data(my_checkbox, "name", /*name*/ ctx[2]);
			set_custom_element_data(my_checkbox, "checked", /*checked*/ ctx[0]);
			set_custom_element_data(my_checkbox, "indeterminate", /*indeterminate*/ ctx[3]);
			set_custom_element_data(my_checkbox, "disabled", /*disabled*/ ctx[4]);
			set_custom_element_data(my_checkbox, "value", /*value*/ ctx[5]);
		},
		m(target, anchor) {
			insert(target, my_checkbox, anchor);

			if (default_slot) {
				default_slot.m(my_checkbox, null);
			}

			/*my_checkbox_binding*/ ctx[11](my_checkbox);
			current = true;

			if (!mounted) {
				dispose = [
					listen(my_checkbox, "myChange", /*onEvent*/ ctx[7]),
					listen(my_checkbox, "myFocus", /*onEvent*/ ctx[7]),
					listen(my_checkbox, "myBlur", /*onEvent*/ ctx[7]),
					listen(my_checkbox, "myStyle", /*onEvent*/ ctx[7])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 512) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[9], dirty, null, null);
				}
			}

			if (!current || dirty & /*color*/ 2) {
				set_custom_element_data(my_checkbox, "color", /*color*/ ctx[1]);
			}

			if (!current || dirty & /*name*/ 4) {
				set_custom_element_data(my_checkbox, "name", /*name*/ ctx[2]);
			}

			if (!current || dirty & /*checked*/ 1) {
				set_custom_element_data(my_checkbox, "checked", /*checked*/ ctx[0]);
			}

			if (!current || dirty & /*indeterminate*/ 8) {
				set_custom_element_data(my_checkbox, "indeterminate", /*indeterminate*/ ctx[3]);
			}

			if (!current || dirty & /*disabled*/ 16) {
				set_custom_element_data(my_checkbox, "disabled", /*disabled*/ ctx[4]);
			}

			if (!current || dirty & /*value*/ 32) {
				set_custom_element_data(my_checkbox, "value", /*value*/ ctx[5]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(my_checkbox);
			if (default_slot) default_slot.d(detaching);
			/*my_checkbox_binding*/ ctx[11](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let __ref;
	let __mounted = false;
	const dispatch = createEventDispatcher();
	let { color = undefined } = $$props;
	let { name = undefined } = $$props;
	let { checked = undefined } = $$props;
	let { indeterminate = undefined } = $$props;
	let { disabled = undefined } = $$props;
	let { value = undefined } = $$props;
	const getWebComponent = () => __ref;

	onMount(() => {
		__mounted = true;
	});

	const setProp = (prop, value) => {
		if (__ref) $$invalidate(6, __ref[prop] = value, __ref);
	};

	const onEvent = e => {
		e.stopPropagation();
		dispatch(e.type, e.detail);

		if (e.type === "myChange") {
			$$invalidate(0, checked = e.detail);
		}
	};

	let { $$slots = {}, $$scope } = $$props;

	function my_checkbox_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			__ref = $$value;
			$$invalidate(6, __ref);
		});
	}

	$$self.$$set = $$props => {
		if ("color" in $$props) $$invalidate(1, color = $$props.color);
		if ("name" in $$props) $$invalidate(2, name = $$props.name);
		if ("checked" in $$props) $$invalidate(0, checked = $$props.checked);
		if ("indeterminate" in $$props) $$invalidate(3, indeterminate = $$props.indeterminate);
		if ("disabled" in $$props) $$invalidate(4, disabled = $$props.disabled);
		if ("value" in $$props) $$invalidate(5, value = $$props.value);
		if ("$$scope" in $$props) $$invalidate(9, $$scope = $$props.$$scope);
	};

	return [
		checked,
		color,
		name,
		indeterminate,
		disabled,
		value,
		__ref,
		onEvent,
		getWebComponent,
		$$scope,
		$$slots,
		my_checkbox_binding
	];
}

class MyCheckbox extends SvelteComponent {
  $$prop_def: MyCheckboxProps;
  $$events_def: MyCheckboxEvents;
  $$slot_def: MyCheckboxSlots;

  $on<K extends keyof MyCheckboxEvents>(type: K, callback: (e: MyCheckboxEvents[K]) => any): () => void {
	  return super.$on(type, callback);
	}

  $set($$props: Partial<MyCheckboxProps>): void {
	  super.$set($$props);
	}

	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			color: 1,
			name: 2,
			checked: 0,
			indeterminate: 3,
			disabled: 4,
			value: 5,
			getWebComponent: 8
		});
	}

	get color() {
		return this.$$.ctx[1];
	}

	set color(color) {
		this.$set({ color });
		flush();
	}

	get name() {
		return this.$$.ctx[2];
	}

	set name(name) {
		this.$set({ name });
		flush();
	}

	get checked() {
		return this.$$.ctx[0];
	}

	set checked(checked) {
		this.$set({ checked });
		flush();
	}

	get indeterminate() {
		return this.$$.ctx[3];
	}

	set indeterminate(indeterminate) {
		this.$set({ indeterminate });
		flush();
	}

	get disabled() {
		return this.$$.ctx[4];
	}

	set disabled(disabled) {
		this.$set({ disabled });
		flush();
	}

	get value() {
		return this.$$.ctx[5];
	}

	set value(value) {
		this.$set({ value });
		flush();
	}

	get getWebComponent(): HTMLMyCheckboxElement | undefined {
		return this.$$.ctx[8];
	}
}

export default MyCheckbox;