/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import { Components, JSX } from 'component-library';


interface MyComponentProps {
  
  /** The first name */
  first?: Components.MyComponent["first"]
  
  /** The middle name */
  middle?: Components.MyComponent["middle"]
  
  /** The last name */
  last?: Components.MyComponent["last"]
  
  /** The age */
  age?: Components.MyComponent["age"]
  
  /** The array of child names */
  kidsNames?: Components.MyComponent["kidsNames"]
}

interface MyComponentEvents {
  
  /** Testing an event without value */
  myCustomEvent: Parameters<JSX.MyComponent["onMyCustomEvent"]>[0]
}

interface MyComponentSlots {
  default: any
}
  
/* generated by Svelte v3.24.1 */
import {
	SvelteComponent,
	binding_callbacks,
	create_slot,
	detach,
	element,
	flush,
	init,
	insert,
	listen,
	safe_not_equal,
	set_custom_element_data,
	transition_in,
	transition_out,
	update_slot
} from "svelte/internal";

import { createEventDispatcher, onMount } from "svelte";

function create_fragment(ctx) {
	let my_component;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*$$slots*/ ctx[9].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[8], null);

	return {
		c() {
			my_component = element("my-component");
			if (default_slot) default_slot.c();
			set_custom_element_data(my_component, "first", /*first*/ ctx[0]);
			set_custom_element_data(my_component, "middle", /*middle*/ ctx[1]);
			set_custom_element_data(my_component, "last", /*last*/ ctx[2]);
			set_custom_element_data(my_component, "age", /*age*/ ctx[3]);
		},
		m(target, anchor) {
			insert(target, my_component, anchor);

			if (default_slot) {
				default_slot.m(my_component, null);
			}

			/*my_component_binding*/ ctx[10](my_component);
			current = true;

			if (!mounted) {
				dispose = listen(my_component, "myCustomEvent", /*onEvent*/ ctx[5]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 256) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[8], dirty, null, null);
				}
			}

			if (!current || dirty & /*first*/ 1) {
				set_custom_element_data(my_component, "first", /*first*/ ctx[0]);
			}

			if (!current || dirty & /*middle*/ 2) {
				set_custom_element_data(my_component, "middle", /*middle*/ ctx[1]);
			}

			if (!current || dirty & /*last*/ 4) {
				set_custom_element_data(my_component, "last", /*last*/ ctx[2]);
			}

			if (!current || dirty & /*age*/ 8) {
				set_custom_element_data(my_component, "age", /*age*/ ctx[3]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(my_component);
			if (default_slot) default_slot.d(detaching);
			/*my_component_binding*/ ctx[10](null);
			mounted = false;
			dispose();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let __ref;
	let __mounted = false;
	const dispatch = createEventDispatcher();
	let { first = undefined } = $$props;
	let { middle = undefined } = $$props;
	let { last = undefined } = $$props;
	let { age = undefined } = $$props;
	let { kidsNames = undefined } = $$props;
	const getWebComponent = () => __ref;

	onMount(() => {
		$$invalidate(11, __mounted = true);
	});

	const setProp = (prop, value) => {
		if (__ref) $$invalidate(4, __ref[prop] = value, __ref);
	};

	const onEvent = e => {
		e.stopPropagation();
		dispatch(e.type, e.detail);
	};

	let { $$slots = {}, $$scope } = $$props;

	function my_component_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			__ref = $$value;
			$$invalidate(4, __ref);
		});
	}

	$$self.$$set = $$props => {
		if ("first" in $$props) $$invalidate(0, first = $$props.first);
		if ("middle" in $$props) $$invalidate(1, middle = $$props.middle);
		if ("last" in $$props) $$invalidate(2, last = $$props.last);
		if ("age" in $$props) $$invalidate(3, age = $$props.age);
		if ("kidsNames" in $$props) $$invalidate(6, kidsNames = $$props.kidsNames);
		if ("$$scope" in $$props) $$invalidate(8, $$scope = $$props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*__mounted, kidsNames*/ 2112) {
			$: if (__mounted) setProp("kidsNames", kidsNames);
		}
	};

	return [
		first,
		middle,
		last,
		age,
		__ref,
		onEvent,
		kidsNames,
		getWebComponent,
		$$scope,
		$$slots,
		my_component_binding
	];
}

class MyComponent extends SvelteComponent {
  $$prop_def: MyComponentProps;
  $$events_def: MyComponentEvents;
  $$slot_def: MyComponentSlots;

  $on<K extends keyof MyComponentEvents>(type: K, callback: (e: MyComponentEvents[K]) => any): () => void {
	  return super.$on(type, callback);
	}

  $set($$props: Partial<MyComponentProps>): void {
	  super.$set($$props);
	}

	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			first: 0,
			middle: 1,
			last: 2,
			age: 3,
			kidsNames: 6,
			getWebComponent: 7
		});
	}

	get first() {
		return this.$$.ctx[0];
	}

	set first(first) {
		this.$set({ first });
		flush();
	}

	get middle() {
		return this.$$.ctx[1];
	}

	set middle(middle) {
		this.$set({ middle });
		flush();
	}

	get last() {
		return this.$$.ctx[2];
	}

	set last(last) {
		this.$set({ last });
		flush();
	}

	get age() {
		return this.$$.ctx[3];
	}

	set age(age) {
		this.$set({ age });
		flush();
	}

	get kidsNames() {
		return this.$$.ctx[6];
	}

	set kidsNames(kidsNames) {
		this.$set({ kidsNames });
		flush();
	}

	get getWebComponent(): HTMLMyComponentElement | undefined {
		return this.$$.ctx[7];
	}
}

export default MyComponent;