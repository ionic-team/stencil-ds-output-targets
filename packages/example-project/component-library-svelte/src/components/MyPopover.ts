/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import { Components, JSX } from 'component-library';


interface MyPopoverProps {
  
  /** The component to display inside of the popover. */
  component?: Components.MyPopover["component"]
  
  /** The data to pass to the popover component. */
  componentProps?: Components.MyPopover["componentProps"]
  
  /** If `true`, the keyboard will be automatically dismissed when the overlay is presented. */
  keyboardClose?: Components.MyPopover["keyboardClose"]
  
  /** Additional classes to apply for custom CSS. If multiple classes are
provided they should be separated by spaces. */
  cssClass?: Components.MyPopover["cssClass"]
  
  /** If `true`, the popover will be dismissed when the backdrop is clicked. */
  backdropDismiss?: Components.MyPopover["backdropDismiss"]
  
  /** The event to pass to the popover animation. */
  event?: Components.MyPopover["event"]
  
  /** If `true`, a backdrop will be displayed behind the popover. */
  showBackdrop?: Components.MyPopover["showBackdrop"]
  
  /** If `true`, the popover will be translucent.
Only applies when the mode is `"ios"` and the device supports
[`backdrop-filter`](https://developer.mozilla.org/en-US/docs/Web/CSS/backdrop-filter#Browser_compatibility). */
  translucent?: Components.MyPopover["translucent"]
  
  /** If `true`, the popover will animate. */
  animated?: Components.MyPopover["animated"]
}

interface MyPopoverEvents {
  
  /** Emitted after the popover has presented. */
  myPopoverDidPresent: Parameters<JSX.MyPopover["onMyPopoverDidPresent"]>[0]
  
  /** Emitted before the popover has presented. */
  myPopoverWillPresent: Parameters<JSX.MyPopover["onMyPopoverWillPresent"]>[0]
  
  /** Emitted before the popover has dismissed. */
  myPopoverWillDismiss: Parameters<JSX.MyPopover["onMyPopoverWillDismiss"]>[0]
  
  /** Emitted after the popover has dismissed. */
  myPopoverDidDismiss: Parameters<JSX.MyPopover["onMyPopoverDidDismiss"]>[0]
}

interface MyPopoverSlots {
  default: any
}
  
/* generated by Svelte v3.24.1 */
import {
	SvelteComponent,
	binding_callbacks,
	create_slot,
	detach,
	element,
	flush,
	init,
	insert,
	listen,
	run_all,
	safe_not_equal,
	set_custom_element_data,
	transition_in,
	transition_out,
	update_slot
} from "svelte/internal";

import { createEventDispatcher, onMount } from "svelte";

function create_fragment(ctx) {
	let my_popover;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*$$slots*/ ctx[17].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[16], null);

	return {
		c() {
			my_popover = element("my-popover");
			if (default_slot) default_slot.c();
			set_custom_element_data(my_popover, "component", /*component*/ ctx[0]);
			set_custom_element_data(my_popover, "keyboard-close", /*keyboardClose*/ ctx[1]);
			set_custom_element_data(my_popover, "css-class", /*cssClass*/ ctx[2]);
			set_custom_element_data(my_popover, "backdrop-dismiss", /*backdropDismiss*/ ctx[3]);
			set_custom_element_data(my_popover, "event", /*event*/ ctx[4]);
			set_custom_element_data(my_popover, "show-backdrop", /*showBackdrop*/ ctx[5]);
			set_custom_element_data(my_popover, "translucent", /*translucent*/ ctx[6]);
			set_custom_element_data(my_popover, "animated", /*animated*/ ctx[7]);
		},
		m(target, anchor) {
			insert(target, my_popover, anchor);

			if (default_slot) {
				default_slot.m(my_popover, null);
			}

			/*my_popover_binding*/ ctx[18](my_popover);
			current = true;

			if (!mounted) {
				dispose = [
					listen(my_popover, "myPopoverDidPresent", /*onEvent*/ ctx[9]),
					listen(my_popover, "myPopoverWillPresent", /*onEvent*/ ctx[9]),
					listen(my_popover, "myPopoverWillDismiss", /*onEvent*/ ctx[9]),
					listen(my_popover, "myPopoverDidDismiss", /*onEvent*/ ctx[9])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 65536) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[16], dirty, null, null);
				}
			}

			if (!current || dirty & /*component*/ 1) {
				set_custom_element_data(my_popover, "component", /*component*/ ctx[0]);
			}

			if (!current || dirty & /*keyboardClose*/ 2) {
				set_custom_element_data(my_popover, "keyboard-close", /*keyboardClose*/ ctx[1]);
			}

			if (!current || dirty & /*cssClass*/ 4) {
				set_custom_element_data(my_popover, "css-class", /*cssClass*/ ctx[2]);
			}

			if (!current || dirty & /*backdropDismiss*/ 8) {
				set_custom_element_data(my_popover, "backdrop-dismiss", /*backdropDismiss*/ ctx[3]);
			}

			if (!current || dirty & /*event*/ 16) {
				set_custom_element_data(my_popover, "event", /*event*/ ctx[4]);
			}

			if (!current || dirty & /*showBackdrop*/ 32) {
				set_custom_element_data(my_popover, "show-backdrop", /*showBackdrop*/ ctx[5]);
			}

			if (!current || dirty & /*translucent*/ 64) {
				set_custom_element_data(my_popover, "translucent", /*translucent*/ ctx[6]);
			}

			if (!current || dirty & /*animated*/ 128) {
				set_custom_element_data(my_popover, "animated", /*animated*/ ctx[7]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(my_popover);
			if (default_slot) default_slot.d(detaching);
			/*my_popover_binding*/ ctx[18](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let __ref;
	let __mounted = false;
	const dispatch = createEventDispatcher();
	let { component } = $$props;
	let { componentProps = undefined } = $$props;
	let { keyboardClose = undefined } = $$props;
	let { cssClass = undefined } = $$props;
	let { backdropDismiss = undefined } = $$props;
	let { event = undefined } = $$props;
	let { showBackdrop = undefined } = $$props;
	let { translucent = undefined } = $$props;
	let { animated = undefined } = $$props;
	const present = (...args) => __ref.present(...args);
	const dismiss = (...args) => __ref.dismiss(...args);
	const onDidDismiss = (...args) => __ref.onDidDismiss(...args);
	const onWillDismiss = (...args) => __ref.onWillDismiss(...args);
	const getWebComponent = () => __ref;

	onMount(() => {
		$$invalidate(19, __mounted = true);
	});

	const setProp = (prop, value) => {
		if (__ref) $$invalidate(8, __ref[prop] = value, __ref);
	};

	const onEvent = e => {
		e.stopPropagation();
		dispatch(e.type, e.detail);
	};

	let { $$slots = {}, $$scope } = $$props;

	function my_popover_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			__ref = $$value;
			$$invalidate(8, __ref);
		});
	}

	$$self.$$set = $$props => {
		if ("component" in $$props) $$invalidate(0, component = $$props.component);
		if ("componentProps" in $$props) $$invalidate(10, componentProps = $$props.componentProps);
		if ("keyboardClose" in $$props) $$invalidate(1, keyboardClose = $$props.keyboardClose);
		if ("cssClass" in $$props) $$invalidate(2, cssClass = $$props.cssClass);
		if ("backdropDismiss" in $$props) $$invalidate(3, backdropDismiss = $$props.backdropDismiss);
		if ("event" in $$props) $$invalidate(4, event = $$props.event);
		if ("showBackdrop" in $$props) $$invalidate(5, showBackdrop = $$props.showBackdrop);
		if ("translucent" in $$props) $$invalidate(6, translucent = $$props.translucent);
		if ("animated" in $$props) $$invalidate(7, animated = $$props.animated);
		if ("$$scope" in $$props) $$invalidate(16, $$scope = $$props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*__mounted, componentProps*/ 525312) {
			$: if (__mounted) setProp("componentProps", componentProps);
		}
	};

	return [
		component,
		keyboardClose,
		cssClass,
		backdropDismiss,
		event,
		showBackdrop,
		translucent,
		animated,
		__ref,
		onEvent,
		componentProps,
		present,
		dismiss,
		onDidDismiss,
		onWillDismiss,
		getWebComponent,
		$$scope,
		$$slots,
		my_popover_binding
	];
}

class MyPopover extends SvelteComponent {
  $$prop_def: MyPopoverProps;
  $$events_def: MyPopoverEvents;
  $$slot_def: MyPopoverSlots;

  $on<K extends keyof MyPopoverEvents>(type: K, callback: (e: MyPopoverEvents[K]) => any): () => void {
	  return super.$on(type, callback);
	}

  $set($$props: Partial<MyPopoverProps>): void {
	  super.$set($$props);
	}

	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			component: 0,
			componentProps: 10,
			keyboardClose: 1,
			cssClass: 2,
			backdropDismiss: 3,
			event: 4,
			showBackdrop: 5,
			translucent: 6,
			animated: 7,
			present: 11,
			dismiss: 12,
			onDidDismiss: 13,
			onWillDismiss: 14,
			getWebComponent: 15
		});
	}

	get component() {
		return this.$$.ctx[0];
	}

	set component(component) {
		this.$set({ component });
		flush();
	}

	get componentProps() {
		return this.$$.ctx[10];
	}

	set componentProps(componentProps) {
		this.$set({ componentProps });
		flush();
	}

	get keyboardClose() {
		return this.$$.ctx[1];
	}

	set keyboardClose(keyboardClose) {
		this.$set({ keyboardClose });
		flush();
	}

	get cssClass() {
		return this.$$.ctx[2];
	}

	set cssClass(cssClass) {
		this.$set({ cssClass });
		flush();
	}

	get backdropDismiss() {
		return this.$$.ctx[3];
	}

	set backdropDismiss(backdropDismiss) {
		this.$set({ backdropDismiss });
		flush();
	}

	get event() {
		return this.$$.ctx[4];
	}

	set event(event) {
		this.$set({ event });
		flush();
	}

	get showBackdrop() {
		return this.$$.ctx[5];
	}

	set showBackdrop(showBackdrop) {
		this.$set({ showBackdrop });
		flush();
	}

	get translucent() {
		return this.$$.ctx[6];
	}

	set translucent(translucent) {
		this.$set({ translucent });
		flush();
	}

	get animated() {
		return this.$$.ctx[7];
	}

	set animated(animated) {
		this.$set({ animated });
		flush();
	}

	
  /** Present the popover overlay after it has been created. */
 get present(): Components.MyPopover["present"] {
		return this.$$.ctx[11];
	}

	
  /** Dismiss the popover overlay after it has been presented. */
 get dismiss(): Components.MyPopover["dismiss"] {
		return this.$$.ctx[12];
	}

	
  /** Returns a promise that resolves when the popover did dismiss. */
 get onDidDismiss(): Components.MyPopover["onDidDismiss"] {
		return this.$$.ctx[13];
	}

	
  /** Returns a promise that resolves when the popover will dismiss. */
 get onWillDismiss(): Components.MyPopover["onWillDismiss"] {
		return this.$$.ctx[14];
	}

	get getWebComponent(): HTMLMyPopoverElement | undefined {
		return this.$$.ctx[15];
	}
}

export default MyPopover;